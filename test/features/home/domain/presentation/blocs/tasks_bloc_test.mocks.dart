// Mocks generated by Mockito 5.0.14 from annotations
// in todo_tdd/test/features/home/domain/presentation/blocs/tasks_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_tdd/core/core.dart' as _i5;
import 'package:todo_tdd/features/home/domain/domain.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeTaskRepository_0 extends _i1.Fake implements _i2.TaskRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetAllTasksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTasksUseCase extends _i1.Mock
    implements _i2.GetAllTasksUseCase {
  MockGetAllTasksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get taskRepository =>
      (super.noSuchMethod(Invocation.getter(#taskRepository),
          returnValue: _FakeTaskRepository_0()) as _i2.TaskRepository);
  @override
  _i4.Future<_i3.Either<_i5.Failure, List<_i2.MyTask>>> call(
          _i5.NoParam? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i5.Failure, List<_i2.MyTask>>>.value(
              _FakeEither_1<_i5.Failure, List<_i2.MyTask>>())) as _i4
          .Future<_i3.Either<_i5.Failure, List<_i2.MyTask>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UpdateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTaskUseCase extends _i1.Mock implements _i2.UpdateTaskUseCase {
  MockUpdateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get taskRepository =>
      (super.noSuchMethod(Invocation.getter(#taskRepository),
          returnValue: _FakeTaskRepository_0()) as _i2.TaskRepository);
  @override
  _i4.Future<_i3.Either<_i5.Failure, bool>> call(
          _i2.UpdateTaskParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i5.Failure, bool>>.value(
                  _FakeEither_1<_i5.Failure, bool>()))
          as _i4.Future<_i3.Either<_i5.Failure, bool>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CreateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTaskUseCase extends _i1.Mock implements _i2.CreateTaskUseCase {
  MockCreateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get taskRepository =>
      (super.noSuchMethod(Invocation.getter(#taskRepository),
          returnValue: _FakeTaskRepository_0()) as _i2.TaskRepository);
  @override
  _i4.Future<_i3.Either<_i5.Failure, _i2.MyTask>> call(
          _i2.CreateTaskParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i5.Failure, _i2.MyTask>>.value(
                  _FakeEither_1<_i5.Failure, _i2.MyTask>()))
          as _i4.Future<_i3.Either<_i5.Failure, _i2.MyTask>>);
  @override
  String toString() => super.toString();
}
